<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>新标准归纳</title>
    <link href="/2019/10/10/C++/C++%E6%96%B0%E6%A0%87%E5%87%86%EF%BC%9A11%E4%B8%8E14/"/>
    <url>/2019/10/10/C++/C++%E6%96%B0%E6%A0%87%E5%87%86%EF%BC%9A11%E4%B8%8E14/</url>
    
    <content type="html"><![CDATA[<h2 id="Variadic-Templates"><a href="#Variadic-Templates" class="headerlink" title="Variadic Templates"></a>Variadic Templates</h2><ul><li>可以有任意多个参数数量，同时参数类型也可以是任意多个</li><li>可变参数模板可以用于递归操作。所以需要同时写一个处理最后情况，即没有参数的函数。否则编译出错。</li></ul><p>比如常见的操作有：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span>... Types&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printX</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp; firstArg,<span class="hljs-keyword">const</span> Type&amp;... args)</span></span>&#123;<span class="hljs-comment">//将会被递归调用</span><br>    cout&lt;&lt;firstArg&lt;&lt;endl;<br>    <span class="hljs-keyword">sizeof</span>...(args);<span class="hljs-comment">//可以获得args的数量</span><br>    <span class="hljs-built_in">printX</span>(args...);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printX</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">//这个函数必须写，否则当args的个数为0时会报错</span><br><br><span class="hljs-comment">//使用</span><br><span class="hljs-built_in">printX</span>(<span class="hljs-number">7.5</span>,<span class="hljs-string">&quot;hello&quot;</span>,bitset&lt;<span class="hljs-number">16</span>&gt;(<span class="hljs-number">377</span>),<span class="hljs-number">42</span>);<br></code></pre></div></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>tuple：</p><p><img src="https://images-1257780535.cos.ap-shanghai.myqcloud.com/blogs/2e28effd572df93c0a3d7d35ce0f9f9b-3954c.png" style="zoom:50%;" /></p><h2 id="Initializer-list"><a href="#Initializer-list" class="headerlink" title="Initializer-list"></a>Initializer-list</h2><p>C++新标准的语法糖之一，可以接受个数不定的参数。</p><p>基本用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> i&#123;&#125;;<span class="hljs-comment">//i被初始化为0</span><br>vector&lt;<span class="hljs-keyword">int</span>&gt; vec&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//动态数组vec中有两个值0和1</span><br><span class="hljs-comment">//...</span><br></code></pre></div></td></tr></table></figure><p>它的背后支撑是 <code>initializer_list&lt;T&gt;</code>，而 <code>initializer_list&lt;T&gt;</code>里面其实就是<strong>array</strong>。</p><p>所以也可以使用它来作为函数的形参：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(initializer_list&lt;<span class="hljs-keyword">int</span>&gt; initlist)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i : initlist)&#123;<br>        <span class="hljs-comment">//....</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="for-loop"><a href="#for-loop" class="headerlink" title="for-loop"></a>for-loop</h2><p>新标准的for-loop会被编译器解释为如下的代码：</p><p><img src="https://images-1257780535.cos.ap-shanghai.myqcloud.com/blogs/70b905fedc4141555829534729444a7e-7a7fd.png" style="zoom:100%;" /></p><p>其中，<code>begin()</code>和 <code>end()</code>成为新标准的全局函数。</p><h3 id="错误使用"><a href="#错误使用" class="headerlink" title="错误使用"></a>错误使用</h3><p>对于以下情况，for-loop无法正常编译：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; s)</span></span>;<span class="hljs-comment">//禁止隐式转换</span><br><span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-comment">//...</span><br>vectot&lt;string&gt; vec;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> C&amp; elem : vec)&#123;<span class="hljs-comment">//错误！因为没有定义string转C类型的类型转换函数</span><br>cout&lt;&lt;elem&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="delete和-default"><a href="#delete和-default" class="headerlink" title="=delete和=default"></a>=delete和=default</h2><p><img src="https://images-1257780535.cos.ap-shanghai.myqcloud.com/blogs/7b2b1face664b066dc6d68ae9abd9eee-58f42.png" style="zoom:50%;" /></p><h3 id="big-five"><a href="#big-five" class="headerlink" title="big-five"></a>big-five</h3><ul><li>默认的big-five只有在需要的时候（被调用）才会被编译器合成</li><li>所有的big-five都是public且inline的</li><li>如果class没有pointer member，用默认的big-five就够了。反例：比如C++中的string，由于它里面的成员变量有指针，所以使用默认的big-five容易出错。另外，对于string类，里面有引用计数，感觉应该是为了实现写时复制读时共享。</li><li>如果一个类只允许让友元类或家族成员拷贝，那么可以把拷贝控制放到private里，且不能定义。在boost库中有一个类<code>noncopyable</code>，这个类就是把拷贝控制放到private里，而且从它派生的子类也会继承它的性质。</li></ul><h3 id="delete"><a href="#delete" class="headerlink" title="=delete"></a>=delete</h3><ul><li>=delete可用于任何函数身上</li><li>一个比较典型的例子：为了让某类型的对象只有一份，可以把该类的拷贝构造和拷贝赋值设置为=delete，让使用者禁止调用拷贝构造和拷贝赋值。</li></ul><h3 id="default"><a href="#default" class="headerlink" title="=default"></a>=default</h3><ul><li>=default只能用于big-five</li></ul><h2 id="Alias-Template"><a href="#Alias-Template" class="headerlink" title="Alias Template"></a>Alias Template</h2><p>化名可以带参数，比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">using</span> Vec = std:vector&lt;T,MyAlloc&lt;T&gt;&gt;;<span class="hljs-comment">//使用自己的内存分配器代替标准库的内存分配器</span><br><br>Vec&lt;<span class="hljs-keyword">int</span>&gt; coll;<span class="hljs-comment">//别名可以含参，等同于下面</span><br>std:vector&lt;T,MyAlloc&lt;T&gt;&gt; coll;<br></code></pre></div></td></tr></table></figure><p>注意：虽然说别名可以带参数，但是无法对别名进行特化，只能对它代替的本体进行特化。</p><p>但是使用macro无法达到同样的效果：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Vec<span class="hljs-meta-string">&lt;T&gt;</span> template<span class="hljs-meta-string">&lt;typename T&gt;</span> std:vector<span class="hljs-meta-string">&lt;T,MyAlloc&lt;T&gt;</span>&gt;;<span class="hljs-comment">//如果使用宏定义</span></span><br><br><span class="hljs-comment">//对于Vec&lt;int&gt; coll;会变成如下的样子</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> <span class="hljs-keyword">int</span>&gt; std:vector&lt;<span class="hljs-keyword">int</span>,MyAlloc&lt;<span class="hljs-keyword">int</span>&gt;&gt;;<span class="hljs-comment">//不是我们想要的效果</span><br></code></pre></div></td></tr></table></figure><p>而且，使用 <code>typedef</code>也无法达到相同的效果，因为 <code>typedef</code>是不接受参数的。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>若想实现一个函数，这个函数的实参是容器+数据类型，比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-built_in">func</span>(list,string);<span class="hljs-comment">//希望该函数在内部组装成list&lt;string&gt;</span><br></code></pre></div></td></tr></table></figure><p>如果使用以下的方法不可取：</p><p><img src="C:\Users\15606\AppData\Roaming\Typora\typora-user-images\image-20210828153549477.png" alt="image-20210828153549477" style="zoom:50%;" /></p><p>解决方法1：使用模板+迭代器+萃取机制。</p><p>可以使用萃取机取出元素类型，比如：</p><p><img src="https://images-1257780535.cos.ap-shanghai.myqcloud.com/blogs/9b118fa0855d9281180f42badcfabda8-bb430.png" style="zoom:50%;" /></p><p>解决方法2：使用模板别名和模板模板参数。如下：</p><p><img src="https://images-1257780535.cos.ap-shanghai.myqcloud.com/blogs/269cad0f9f8e281a3c0a082393cc68c3-c4a7c.png" style="zoom:50%;" /></p><h3 id="别名的其他用法"><a href="#别名的其他用法" class="headerlink" title="别名的其他用法"></a>别名的其他用法</h3><p>除了用于模板的别名：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">charT</span>&gt;</span> <br><span class="hljs-keyword">using</span> mystring = std::basic_string&lt;CharT,std::char_traits&lt;CharT&gt;&gt;;<br><span class="hljs-comment">//...</span><br>mystring&lt;<span class="hljs-keyword">char</span>&gt; str;<br></code></pre></div></td></tr></table></figure><p>还能用于模板的参数：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Container</span>&#123;</span><br><span class="hljs-keyword">using</span> value_type = T;<br>&#125;;<br><span class="hljs-comment">//上下代码等同效果</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Cntr&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fn2</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Cntr&amp; c)</span></span>&#123;<br>    <span class="hljs-keyword">typename</span> Cntr::value_type n;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也能用于函数：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-keyword">using</span> func = <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(*)(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>);<span class="hljs-comment">//等效于typedef void(*func)(int,int);</span><br><span class="hljs-comment">//...</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">example</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>&#123;&#125;<br>func fn = example;<br></code></pre></div></td></tr></table></figure><p>typedef和别名实际上的差别并不大，但是别名的灵活性更胜一筹。</p><h2 id="noexcept"><a href="#noexcept" class="headerlink" title="noexcept"></a>noexcept</h2><p>在函数后头添加这个关键字，表示这个函数保证不会发生异常。比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></div></td></tr></table></figure><p>也可以对 <code>noexcept</code>添加条件，比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-title">noexcept</span><span class="hljs-params">(<span class="hljs-literal">true</span>)</span></span>;<span class="hljs-comment">//可以添加条件，表示符合这个条件就不会发生异常</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(Type&amp; x,Type&amp; y)</span> <span class="hljs-title">noexcept</span><span class="hljs-params">(<span class="hljs-keyword">noexcept</span>(x.swap(y)))</span></span>&#123;<br>    x.<span class="hljs-built_in">swap</span>(y);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意：如果发生异常，没有及时处理，那么这个异常就会进入 <code>std::terminate()</code>，并且调用 <code>std::abort()</code>结束程序。</p><p>另外，对于用户自定义类的移动函数，也需要在后面添加 <code>noexcept</code>关键字。如果没有添加，特别是使用容器 <code>vector</code>时，<code>vector</code>只会调用开销更大的拷贝函数，而不会去调用移动函数。（能够生长的容器只有 <code>vector</code>和 <code>deque</code>）</p><p>使用 <code>noexcept</code>可以让编译器对代码进行优化。</p><h2 id="override"><a href="#override" class="headerlink" title="override"></a>override</h2><p>这个关键字只是为了让编译器帮助检查，避免重写过程中的错误，不一定需要使用。但是感觉写了也增加了程序的可读性。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base</span>&#123;</span><br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">vfunc</span><span class="hljs-params">(<span class="hljs-keyword">float</span>)</span></span>&#123;&#125;  <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">test1</span>:</span>Base&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">vfunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>&#123;&#125;  <span class="hljs-comment">//本意是重写Base的vfunc函数，但是由于失误更改了形参类型</span><br>     <span class="hljs-comment">//编译器会认为定义了一个新函数</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">test2</span>:</span>Base&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">vfunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> <span class="hljs-keyword">override</span></span>&#123;&#125;  <span class="hljs-comment">//本意是重写Base的vfunc函数，但是由于失误更改了形参类型</span><br>       <span class="hljs-comment">//不过有override关键字的存在，编译器发现了错误</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>这个关键字和 <code>override</code>一样，也是为了让编译器帮助检查。</p><p>这个关键字可用于类身上，它的作用就是告诉编译器：我是这个继承体系之下的最后一个，不能再有类继承我了。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base</span> <span class="hljs-keyword">final</span>&#123;</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">test</span>:</span>Base&#123;&#125;;<span class="hljs-comment">//错误！不能继承一个final类</span><br></code></pre></div></td></tr></table></figure><p>也可以用于虚函数身上，作用同上。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++">strcuct Base&#123;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-keyword">final</span></span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">test</span>:</span>Base&#123;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//错误！不能重写一个final虚函数</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><p>使用 <code>decltype</code>关键字可以找到一个表达式的类型，相当于 <code>typeof</code>。比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++">map&lt;string,<span class="hljs-keyword">float</span>&gt; coll;<br><span class="hljs-keyword">decltype</span>(coll)::value_type elem;<span class="hljs-comment">//可以使用decltype获得容器的类型</span><br><span class="hljs-comment">//等同于以下</span><br><span class="hljs-comment">//before C++11</span><br>map&lt;string,<span class="hljs-keyword">float</span>&gt;::value_type elem;<br></code></pre></div></td></tr></table></figure><p>它可以用来声明一个 <code>return type</code>：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T1,<span class="hljs-keyword">typename</span> T2&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(T1 x,T2 y)</span>-&gt;<span class="hljs-title">decltype</span><span class="hljs-params">(x+y)</span></span>&#123;&#125;;<br></code></pre></div></td></tr></table></figure><p>也可以用于模板元编程：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(T obj)</span></span>&#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> <span class="hljs-title">decltype</span><span class="hljs-params">(obj)</span>::iterator iType</span>;<span class="hljs-comment">//取迭代器，当然前提是T有迭代器</span><br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>还可以用于 <code>lambda</code>：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> cmp = [](<span class="hljs-keyword">const</span> Person&amp; p1,<span class="hljs-keyword">const</span> Person&amp; p2)&#123;<br>    <span class="hljs-comment">//....</span><br>&#125;;<br><span class="hljs-function">std::set&lt;Person,<span class="hljs-title">decltype</span><span class="hljs-params">(cmp)</span>&gt; <span class="hljs-title">coll</span><span class="hljs-params">(cmp)</span></span>;<span class="hljs-comment">//常用于对容器的排序</span><br></code></pre></div></td></tr></table></figure><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><p>lambda有点像inline function，它可以被当作函数参数或一个局部object。</p><p>它有很多形式：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++">[]&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;hello&quot;</span>&lt;&lt;std::endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++">[]&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;hello&quot;</span>&lt;&lt;std::endl;<br>&#125;();<span class="hljs-comment">//注意这个括号，表示直接调用，输出hello</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> func = []&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;hello&quot;</span>&lt;&lt;std::endl;<br>&#125;;<br><span class="hljs-built_in">func</span>();<span class="hljs-comment">//输出hello</span><br></code></pre></div></td></tr></table></figure><p>它的语法如下：</p><script type="math/tex; mode=display">[\ \ ]\ ()\ mutable_{opt}\ throwSpec_{opt}->retType_{opt}\{...\}</script><ul><li><p><strong>[ ]</strong>为捕获列表，可以为空，也可以写入变量。捕获方式可以是值传递，也可以是引用传递。</p><ul><li>[=]：全部都是值传递</li><li>[&amp;a]：a变量引用传递</li><li>[a]：a变量值传递</li><li>[&amp;a,=]：a变量引用传递，其他变量值传递</li></ul></li><li><strong>( )</strong>为形参列表</li><li>$mutable_{opt}$表示是否可以改动捕获列表中的变量。</li><li>$throwSpec_{opt}$表示是否丢出异常</li><li>$retType_{opt}$表示返回类型。</li><li>$mutable<em>{opt}$、$throwSpec</em>{opt}$、$retType_{opt}$可有可无。若三者都不存在，可以不写<strong>( )</strong>。但是若三者有一个出现，那么<strong>( )</strong>必须存在。</li><li><strong>{ }</strong>为函数本体</li></ul><h2 id="Rvalue-references"><a href="#Rvalue-references" class="headerlink" title="Rvalue references"></a>Rvalue references</h2><ul><li>左值：可以出现在等号的左侧</li><li>右值：只能出现在等号的右侧<ul><li>右值引用可以避免不必要的拷贝</li><li>临时对象也是右值</li><li>右值没有名称</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
